services:

  mongo:
    image: mongo
    restart: always
    logging:
      driver: none
    healthcheck:
      test:  echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  backend-test:
    build:
      context: backend
      dockerfile: ../Dockerfile.backend
    environment:
      DB_ADDRESS: mongodb://mongo:27017/mestodb
    command: npm run lint
    restart: 'no'
    depends_on:
      mongo:
        condition: service_healthy

  backend:
    build:
      context: backend
      dockerfile: ../Dockerfile.backend
    environment:
      DB_ADDRESS: mongodb://mongo:27017/mestodb
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - 3001:3000
    healthcheck:
      interval: 10s
      timeout: 2s 
      start_period: 15s 
      retries: 5 
      test: node healthcheck.js

  auth_microfrontend:
    build:
      context: frontend/auth-microfrontend
      dockerfile: ./Dockerfile
    container_name: auth_microfrontend
    ports:
      - 3002:3002
    networks:
      - default
    environment:
      NODE_ENV: development

  shared_microfrontend:
    build:
      context: frontend/shared-microfrontend
      dockerfile: ./Dockerfile
    ports:
      - 3003:3003
    depends_on:
      auth_microfrontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - default

  profile_microfrontend:
    build:
      context: frontend/profile-microfrontend
      dockerfile: ./Dockerfile
    container_name: profile_microfrontend
    ports:
      - 3004:3004
    depends_on:
      auth_microfrontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - default

  cards_microfrontend:
    build:
      context: frontend/cards-microfrontend
      dockerfile: ./Dockerfile
    container_name: cards_microfrontend
    ports:
      - 3005:3005
    depends_on:
      auth_microfrontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - default

  host_microfrontend:
    build:
      context: frontend/host-microfrontend
      dockerfile: ./Dockerfile
    ports:
      - 3000:3000
    depends_on:
      profile_microfrontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - default

networks:
  default:
    driver: bridge